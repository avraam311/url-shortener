// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_analytics is a generated GoMock package.
package mock_analytics

import (
	context "context"
	reflect "reflect"

	db "github.com/avraam311/url-shortener/internal/models/db"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceAnalytics is a mock of ServiceAnalytics interface.
type MockServiceAnalytics struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAnalyticsMockRecorder
}

// MockServiceAnalyticsMockRecorder is the mock recorder for MockServiceAnalytics.
type MockServiceAnalyticsMockRecorder struct {
	mock *MockServiceAnalytics
}

// NewMockServiceAnalytics creates a new mock instance.
func NewMockServiceAnalytics(ctrl *gomock.Controller) *MockServiceAnalytics {
	mock := &MockServiceAnalytics{ctrl: ctrl}
	mock.recorder = &MockServiceAnalyticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAnalytics) EXPECT() *MockServiceAnalyticsMockRecorder {
	return m.recorder
}

// GetAnalytics mocks base method.
func (m *MockServiceAnalytics) GetAnalytics(arg0 context.Context, arg1 string) ([]*db.Analytics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalytics", arg0, arg1)
	ret0, _ := ret[0].([]*db.Analytics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalytics indicates an expected call of GetAnalytics.
func (mr *MockServiceAnalyticsMockRecorder) GetAnalytics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalytics", reflect.TypeOf((*MockServiceAnalytics)(nil).GetAnalytics), arg0, arg1)
}
